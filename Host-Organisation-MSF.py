import msfrpc
import time

# Function to read hosts from the file
def read_hosts(file_path):
    with open(file_path, 'r') as file:
        return [line.strip() for line in file if line.strip()]

# Connect to Metasploit
def connect_to_metasploit(username, password):
    client = msfrpc.Msfrpc({})
    client.login(username, password)
    return client

# Create a workspace if it doesn't exist and switch to it
def create_and_switch_workspace(msf_client, workspace_name):
    workspaces = msf_client.call('db.workspaces')['workspaces']
    if workspace_name not in [ws['name'] for ws in workspaces]:
        msf_client.call('db.add_workspace', [workspace_name])
    msf_client.call('db.set_workspace', [workspace_name])

# Scan hosts for open ports and add to Metasploit database
def scan_hosts(msf_client, hosts):
    for host in hosts:
        # Configure and run the scan module
        scan_module = msf_client.call('module.use', ['auxiliary', 'scanner/portscan/tcp'])
        scan_module.call('module.set', ['RHOSTS', host])
        scan_module.call('module.set', ['PORTS', '1-65535'])
        scan_module.call('module.set', ['THREADS', 10])
        scan_module.call('module.execute')

        # Sleep to allow scan to complete
        time.sleep(60)  # Adjust the sleep time based on the scan duration

        # Fetch the discovered services/ports
        services = msf_client.call('db.services', [host])
        for service in services['services']:
            port = service['port']
            print(f"Discovered service on {host}: {port}/{service['proto']} - {service['name']}")

            # Create and switch to a workspace based on the port
            workspace_name = f"port_{port}"
            create_and_switch_workspace(msf_client, workspace_name)

            # Add the host to the database in the appropriate workspace
            msf_client.call('db.add_host', [host])

            # Further analysis based on the service
            further_analyze(msf_client, host, port, service['proto'])

# Further analysis of discovered services
def further_analyze(msf_client, host, port, proto):
    if proto == 'tcp':
        if port == 80 or port == 443:
            # HTTP/HTTPS Service
            run_http_analysis(msf_client, host, port)
        elif port == 22:
            # SSH Service
            run_ssh_analysis(msf_client, host, port)
        # Add more conditions for other services as needed

# HTTP Analysis
def run_http_analysis(msf_client, host, port):
    http_scan = msf_client.call('module.use', ['auxiliary', 'scanner/http/title'])
    http_scan.call('module.set', ['RHOSTS', host])
    http_scan.call('module.set', ['RPORT', port])
    http_scan.call('module.execute')
    time.sleep(30)  # Adjust based on scan time

# SSH Analysis
def run_ssh_analysis(msf_client, host, port):
    ssh_scan = msf_client.call('module.use', ['auxiliary', 'scanner/ssh/ssh_version'])
    ssh_scan.call('module.set', ['RHOSTS', host])
    ssh_scan.call('module.set', ['RPORT', port])
    ssh_scan.call('module.execute')
    time.sleep(30)  # Adjust based on scan time

# Main function
def main():
    live_hosts_file = 'path/to/pentesting/live_hosts.txt'
    username = 'msf_username'
    password = 'msf_password'
    
    # Read hosts
    hosts = read_hosts(live_hosts_file)
    
    # Connect to Metasploit
    msf_client = connect_to_metasploit(username, password)
    
    # Scan hosts and add to appropriate workspaces
    scan_hosts(msf_client, hosts)

if __name__ == '__main__':
    main()
